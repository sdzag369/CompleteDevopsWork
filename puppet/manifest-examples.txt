puppet manifest need to be placed on below location by default. 

on master node

/etc/puppetlabs/code/environments/production/manifests

site.pp is default manifest name can be use. 

=======================================================================================

Syntax to Write puppet resources inside manifests. 

resourcetype{'title':
	argument or attribute => value,
	argument or attribute => value,
}

example: 
service{'crond':
	ensure => 'stopped',
	enable => 'false',
}

============================================================================================

example 1: 

## create a file

file {'/tmp/hellodevops':                        # resource type file and filename
  ensure  => present,                             # make sure it exists
  mode    => '0644',                              # file permissions
  content => "It works on ${ipaddress_eth0}!\n",  # Print the eth0 IP fact 
}

file {'devops.txt':
	path => '/tmp/devops.txt'
}

=============================================================================================
example 2: 

# execute 'apt-get update'
exec { 'apt-update':                    # exec resource named 'apt-update'
  command => '/usr/bin/apt-get update'  # command this resource will run
}

# install nginx package
package { 'nginx':
  require => Exec['apt-update'],        # require 'apt-update' before installing
  ensure => installed,
}

# ensure nginx service is running
service { 'nginx':
  ensure => running,
}

===============================================================================================

example 3: class definitions

class apache {
	# execute 'apt-get update'
	exec { 'apt-update':                    # exec resource named 'apt-update'
		command => '/usr/bin/apt-get update'  # command this resource will run
	}

	# install apache2 package
	package { 'apache2':
		require => Exec['apt-update'],        # require 'apt-update' before installing
		ensure => installed,
	}
	# ensure apache2 service is running
	service { 'apache2':
		ensure => running,
	}
}
class{'apache':}

class linux{

	$soft=['git','vim']
	exec { 'apt-update':
		command => '/usr/bin/apt-get update'
	}
	package {$soft:
		require => Exec['apt-update'],
		ensure => installed,
	}
	
}
class{'linux':}

================================================================================================

example 4: class definitions

class docker { 
       package {'curl': 
               ensure  => present, 
       } 
       exec {'apt-update': 
               command => '/usr/bin/apt-get update' 
       } 
       exec {'download_docker_key': 
               command => '/usr/bin/curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -' 
       } 
       exec {'add_docker_repo': 
               command => '/usr/bin/add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"',  
               require => Exec['apt-update'] 
       } 
       exec {'docker_cache': 
               command => '/usr/bin/apt-cache policy docker-ce' 
       } 
       exec {'install_docker': 
               command => '/usr/bin/apt-get install -y docker-ce' 
       } 
}

class{'docker':}

================================================================================================

example 5: node & class definitions

node 'node1ip'{
	file {'/tmp/node1':                        
		ensure  => present,                             
		mode    => '0644',                              
		content => "It works on ${ipaddress_eth0}!\n",
	}
	class{'node1':}
}

node 'node2ip'{

	file {'/tmp/node2':                        
		ensure  => present,                             
		mode    => '0644',                              
		content => "It works on ${ipaddress_eth0}!\n",
	}
	class{'node2':}
}

class node1{

	exec { 'apt-update':                    
		command => '/usr/bin/apt-get update'
	}
	package { 'nginx':
		require => Exec['apt-update'],
		ensure => installed,
	}
	service { 'nginx':
		ensure => running,
	}
	
}

class node2{

	exec { 'apt-update':                    
		command => '/usr/bin/apt-get update'
	}
	package { 'apache2':
		require => Exec['apt-update'],
		ensure => installed,
	}
	service { 'apache2':
		ensure => running,
	}
	
}

=======================================================================================================
example 6: what if we want to run some block of code against all remote nodes, with node definition

node default {                        ## default means it runs on all nodes "default can replaced with a specific node name"
	file {'/tmp/nodeall':                        
		ensure  => present,                             
		mode    => '0644',                              
		content => "It works on ${ipaddress_eth0}!\n",
	}
	class{'node1':}
	class{'restart_apache':}
}
=======================================================================================================

example 7: puppet modules 

mymodule/
	manifests/    ## where our puppet code goes 
	files/        ## flat configuration files to copied
	templates/    ## dynamic configuration files
	tests/        ## smoke tests / example usage
	spec/         ## automated tests

puppet module genereate naresh-tomcat
mkdir tomcat/{fies, templates}

/opt/puppetlabs/bin/puppet generate module <author-modulename>
/opt/puppetlabs/bin/puppet generate module naresh-tomcat

cd tomcat/manifests

vi setup_user.pp

calss tomcat::setup_user {

	group { 'tomcat':
		name => 'tomcat',
		ensure => 'present',
		gid => '894',
	}
	user { 'tomcat':
		name => 'tomcat',
		ensure => 'present',
		uid => '894',
		gid => '894',
		shell => '/bin/bash',
	}
	
}

vi init.pp

class tomcat {

  class {'tomcat::setup_user':}

}
